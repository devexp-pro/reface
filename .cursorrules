# Reface Development Guidelines

## Writing Code with Reface

### Imports

- Use module-specific imports:
  ```typescript
  import { createElement, Fragment } from "@reface/jsx";
  import type { Template } from "@reface/types";
  import { styled } from "@reface/elements";
  import { html } from "@reface/html";
  import { clean } from "@reface/layouts";
  ```

### HTML Templates

- Use `html` for trusted HTML content:

  ```typescript
  // Safe by default
  const template = html`<div>${userInput}</div>`;

  // Explicitly trust HTML
  const trusted = html`<div>${html(trustedHTML)}</div>`;
  ```

### Elements

- Use element factories for components:

  ```typescript
  import { div, span } from "@reface/elements";

  const template = div({ class: "container" })`
    ${span`Hello World`}
  `;
  ```

### Styled Components

- Use styled components for CSS-in-JS:
  ```typescript
  const Button = styled.button`
    & {
      background: blue;
      color: white;
    }
    &:hover {
      background: darkblue;
    }
  `;
  ```

### JSX

- Use JSX for complex components:
  ```typescript
  function MyComponent({ title }: Props): Template {
    return (
      <div class="container">
        <h1>{title}</h1>
      </div>
    );
  }
  ```

## Contributing to Reface

### Project Structure

```
reface/
├── core/       # Core rendering engine
├── html/       # HTML template system
├── elements/   # Element factories
├── jsx/        # JSX support
└── layouts/    # Layout system
```

### Module Guidelines

1. Core Module

   - Keep it minimal and focused
   - Handle core rendering logic
   - Manage security features
   - File organization:
     ```
     core/
     ├── mod.ts       # Public API
     ├── types.ts     # Type definitions
     ├── render.ts    # Core rendering logic
     ├── escape.ts    # Security utilities
     └── attributes.ts # Attribute handling
     ```

2. HTML Module

   - Focus on string manipulation
   - Handle template processing
   - Manage XSS protection
   - File organization:
     ```
     html/
     ├── mod.ts       # Public API
     ├── types.ts     # Type definitions
     ├── templates.ts # Template processing
     ├── escape.ts    # HTML escaping
     └── attributes.ts # Attribute handling
     ```

3. Elements Module

   - Provide element factories
   - Handle attribute processing
   - Support styled components

4. JSX Module

   - Keep JSX runtime simple
   - Support Fragment
   - Handle children correctly

5. Layouts Module
   - Focus on page structure
   - Handle meta tags
   - Support different layouts

### Testing

- Place tests in `__tests__` directory
- Use integration tests for features
- Test security features thoroughly
- Use `compareHTML` for HTML comparison:

  ```typescript
  function compareHTML(actual: string, expected: string) {
    assertEquals(
      pretty(actual, { ocd: true }),
      pretty(expected, { ocd: true })
    );
  }

  Deno.test("Feature - should do something", () => {
    const template = div`Hello ${user}`;
    const result = render(template);

    compareHTML(result, "<div>Hello John</div>");
  });
  ```

### Documentation

- Keep docs in sync with code
- Document security implications
- Provide clear examples
- Update CHANGELOG.md

### Code Style

- Use TypeScript strict mode
- Export types separately
- Use meaningful names
- Comment complex logic
- Follow existing patterns

### Security

- Always escape user input
- Mark trusted content explicitly
- Test XSS protection
- Document security features

### File Organization

- Each module follows a consistent structure:

  ```
  module/
  ├── mod.ts              # Public API exports
  ├── types.ts            # Type definitions
  ├── core-feature.ts     # Core functionality
  ├── utils/              # Helper functions
  │   ├── mod.ts         # Utils exports
  │   └── helpers.ts     # Utility functions
  └── __tests__/         # Tests
      ├── unit/          # Unit tests
      └── integration/   # Integration tests
  ```

- Module exports:

  ```typescript
  // mod.ts
  export type { ModuleTypes } from "./types.ts";
  export { mainFeature } from "./core-feature.ts";
  export { utilities } from "./utils/mod.ts";
  ```

- Test organization:

  ```typescript
  // __tests__/integration/feature.test.ts
  Deno.test("Feature - Integration", async (t) => {
    await t.step("should handle basic case", () => {
      // Test code
    });

    await t.step("should handle edge case", () => {
      // Test code
    });
  });
  ```
